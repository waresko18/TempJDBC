package cz.vutbr.fit.xfekia00;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.DefaultComboBoxModel;
import cz.vutbr.fit.jdbc.temp.ConnectionType;

/**
 *
 * @author Filip Fekiac
 */
public class MainWindow extends javax.swing.JFrame implements DatabaseActionListener {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        // presmerovanie štandardných vstupov a výstupov do textového poľa
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
        
        // definovanie listenera pre zmenu DB
        DatabaseConnection.init(databaseSelector).addActionListener(this);
        // inicializacia parsera suborov
        FileParser.init(statementTextArea, (DatabaseSelector) databaseSelector);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        connectionDialog = new javax.swing.JDialog();
        username = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        url = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        driver = new javax.swing.JTextField();
        saveConnectionButton = new javax.swing.JButton();
        applicationDialog = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        historySizeSpinner = new javax.swing.JSpinner();
        historyDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList();
        historySelectedPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        historyStatementTextArea = new javax.swing.JTextArea();
        historyTabbedPane = new javax.swing.JTabbedPane();
        historyDatabaseName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        saveQueryFileChooser = new javax.swing.JFileChooser();
        statementDialog = new javax.swing.JDialog();
        generateType = new javax.swing.JComboBox();
        generateButton = new javax.swing.JButton();
        generatePanel = new javax.swing.JPanel();
        resultsTabbedPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        databaseSelector = new DatabaseSelector();
        runScriptButton = new javax.swing.JButton();
        runCursorButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statementTextArea = new StatementField();
        jScrollPane5 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        reconnectMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        historyMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        createTableMenu = new javax.swing.JMenuItem();
        dropTableMenu = new javax.swing.JMenuItem();
        insertMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        connectionMenuItem = new javax.swing.JMenuItem();
        applicationMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        connectionDialog.setTitle("Connection");
        connectionDialog.setMinimumSize(new java.awt.Dimension(250, 250));
        connectionDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        connectionDialog.setName("connectionDialog"); // NOI18N

        jLabel1.setText("User name");

        jLabel2.setText("Password");

        password.setToolTipText("");

        jLabel3.setText("URL");

        jLabel4.setText("Path");

        jLabel5.setText("Driver");

        saveConnectionButton.setText("Save");
        saveConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConnectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connectionDialogLayout = new javax.swing.GroupLayout(connectionDialog.getContentPane());
        connectionDialog.getContentPane().setLayout(connectionDialogLayout);
        connectionDialogLayout.setHorizontalGroup(
            connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectionDialogLayout.createSequentialGroup()
                        .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password)
                            .addComponent(username)
                            .addComponent(url)
                            .addComponent(path)
                            .addComponent(driver, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectionDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveConnectionButton)))
                .addContainerGap())
        );
        connectionDialogLayout.setVerticalGroup(
            connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(driver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saveConnectionButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        applicationDialog.setTitle("Application settings");
        applicationDialog.setMinimumSize(new java.awt.Dimension(170, 90));
        applicationDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        applicationDialog.setType(java.awt.Window.Type.POPUP);

        jLabel6.setText("History size");

        historySizeSpinner.setValue(History.MAXIMUM_SIZE);
        // Disable keyboard edits in the spinner
        javax.swing.JFormattedTextField tf = ((javax.swing.JSpinner.DefaultEditor) historySizeSpinner.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);
        historySizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                historySizeSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout applicationDialogLayout = new javax.swing.GroupLayout(applicationDialog.getContentPane());
        applicationDialog.getContentPane().setLayout(applicationDialogLayout);
        applicationDialogLayout.setHorizontalGroup(
            applicationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(historySizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addContainerGap())
        );
        applicationDialogLayout.setVerticalGroup(
            applicationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(applicationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(historySizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        historyDialog.setTitle("Statements history");
        historyDialog.setAlwaysOnTop(true);
        historyDialog.setMinimumSize(new java.awt.Dimension(500, 500));

        historyList.setModel(History.init());
        historyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                historyListValueChanged(e);
            }
        });
        jScrollPane3.setViewportView(historyList);

        historyStatementTextArea.setColumns(20);
        historyStatementTextArea.setRows(5);
        jScrollPane4.setViewportView(historyStatementTextArea);

        historyDatabaseName.setText("DIRECT");

        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout historySelectedPanelLayout = new javax.swing.GroupLayout(historySelectedPanel);
        historySelectedPanel.setLayout(historySelectedPanelLayout);
        historySelectedPanelLayout.setHorizontalGroup(
            historySelectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historySelectedPanelLayout.createSequentialGroup()
                .addComponent(historyDatabaseName)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(historyTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
        );
        historySelectedPanelLayout.setVerticalGroup(
            historySelectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historySelectedPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(historySelectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(historyDatabaseName)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout historyDialogLayout = new javax.swing.GroupLayout(historyDialog.getContentPane());
        historyDialog.getContentPane().setLayout(historyDialogLayout);
        historyDialogLayout.setHorizontalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historySelectedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyDialogLayout.setVerticalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addComponent(historySelectedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        saveQueryFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveQueryFileChooser.setDialogTitle("");

        statementDialog.setTitle("Generate statement");
        statementDialog.setAlwaysOnTop(true);
        statementDialog.setMinimumSize(new java.awt.Dimension(500, 500));

        generateType.setModel(new DefaultComboBoxModel<>(ConnectionType.values()));

        generateButton.setText("Create");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        generatePanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout statementDialogLayout = new javax.swing.GroupLayout(statementDialog.getContentPane());
        statementDialog.getContentPane().setLayout(statementDialogLayout);
        statementDialogLayout.setHorizontalGroup(
            statementDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statementDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statementDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(statementDialogLayout.createSequentialGroup()
                        .addComponent(generateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateButton)))
                .addContainerGap())
        );
        statementDialogLayout.setVerticalGroup(
            statementDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statementDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statementDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TempGUI");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/icon.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        runScriptButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        runScriptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/play-blue-icon.png"))); // NOI18N
        runScriptButton.setText("Run script");
        runScriptButton.setEnabled(false);
        runScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runScriptButtonActionPerformed(evt);
            }
        });

        runCursorButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        runCursorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/cursor-blue-icon.png"))); // NOI18N
        runCursorButton.setText("Run cursor");
        runCursorButton.setEnabled(false);
        runCursorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCursorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runScriptButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runCursorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(databaseSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(databaseSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(runScriptButton)
                        .addComponent(runCursorButton)))
                .addContainerGap())
        );

        databaseSelector.addActionListener(DatabaseConnection.init(databaseSelector));

        statementTextArea.setColumns(20);
        statementTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        statementTextArea.setRows(5);
        jScrollPane1.setViewportView(statementTextArea);

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        console.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane5.setViewportView(console);

        jMenu1.setText("File");

        reconnectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        reconnectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/database-connect-icon.png"))); // NOI18N
        reconnectMenuItem.setText("Reconnect");
        reconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconnectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(reconnectMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/open-icon.png"))); // NOI18N
        openMenuItem.setText("Open query");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/page-save-icon.png"))); // NOI18N
        saveMenuItem.setText("Save query");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        historyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        historyMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/history-icon.png"))); // NOI18N
        historyMenuItem.setText("History");
        historyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(historyMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        quitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/Exit-icon.png"))); // NOI18N
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Help");

        createTableMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/table-add-icon.png"))); // NOI18N
        createTableMenu.setText("Create table");
        createTableMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTableMenuActionPerformed(evt);
            }
        });
        jMenu3.add(createTableMenu);

        dropTableMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/table-remove-icon.png"))); // NOI18N
        dropTableMenu.setText("Drop table");
        dropTableMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropTableMenuActionPerformed(evt);
            }
        });
        jMenu3.add(dropTableMenu);

        insertMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/table-lines-icon.png"))); // NOI18N
        insertMenu.setText("Insert");
        insertMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertMenuActionPerformed(evt);
            }
        });
        jMenu3.add(insertMenu);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Settings");

        connectionMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/database-settings-icon.png"))); // NOI18N
        connectionMenuItem.setText("Connection settings");
        connectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(connectionMenuItem);

        applicationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cz/vutbr/fit/xfekia00/icons/application-settings-icon.png"))); // NOI18N
        applicationMenuItem.setText("Application");
        applicationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(applicationMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultsTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane5)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
        );

        resultsTabbedPanel.getAccessibleContext().setAccessibleName("result");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /***
     * Menu tlacitko pre ukoncenie aplikacie
     * @param evt 
     */
    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        int res = JOptionPane.showConfirmDialog(rootPane,
                "Do you really want to exit?",
                "Confirm",
                JOptionPane.YES_NO_OPTION);

        if (res == JOptionPane.YES_OPTION) {
            DatabaseConnection.init(null).close();
            System.exit(0);
        }
    }//GEN-LAST:event_quitMenuItemActionPerformed

    /***
     * Tlacitko na ulozenie zadanych parametrov pre pripojenie na DB
     * @param evt 
     */
    private void saveConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConnectionButtonActionPerformed
        DatabaseConnection dbCon = DatabaseConnection.init(null);
        dbCon.properties.setProperty("username", username.getText());
        dbCon.properties.setProperty("password", new String(password.getPassword()));
        dbCon.properties.setProperty("url", url.getText());
        dbCon.properties.setProperty("driver", driver.getText());
        dbCon.properties.setProperty("path", path.getText());

        connectionDialog.setVisible(!dbCon.connect());
    }//GEN-LAST:event_saveConnectionButtonActionPerformed

    /***
     * Zobrazenie dialogu pre nastavenie parametrov pripojenia k DB
     * @param evt 
     */
    private void connectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionMenuItemActionPerformed
        DatabaseConnection dbCon = DatabaseConnection.init(null);
        username.setText(dbCon.properties.getProperty("username"));
        password.setText(dbCon.properties.getProperty("password"));
        url.setText(dbCon.properties.getProperty("url"));
        driver.setText(dbCon.properties.getProperty("driver"));
        path.setText(dbCon.properties.getProperty("path"));

        connectionDialog.setVisible(true);
    }//GEN-LAST:event_connectionMenuItemActionPerformed

    /***
     * Znovu  pripojenie na DB
     * @param evt 
     */
    private void reconnectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconnectMenuItemActionPerformed
        DatabaseConnection.init(null).connect();
    }//GEN-LAST:event_reconnectMenuItemActionPerformed
    
    /***
     * dialog pre nastavenie aplikacie
     * @param evt 
     */
    private void applicationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationMenuItemActionPerformed
        applicationDialog.setVisible(true);
    }//GEN-LAST:event_applicationMenuItemActionPerformed

    /***
     * nastavenie velkosti historie
     * @param evt 
     */
    private void historySizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_historySizeSpinnerStateChanged
        History.MAXIMUM_SIZE = (Integer) historySizeSpinner.getValue();
    }//GEN-LAST:event_historySizeSpinnerStateChanged

    /***
     * Otvorenie dialogu s historiou
     * @param evt 
     */
    private void historyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyMenuItemActionPerformed
        historyList.clearSelection();
        historySelectedPanel.setVisible(false);
        historyDialog.setVisible(true);
    }//GEN-LAST:event_historyMenuItemActionPerformed

    /***
     * spustenie celeho skriptu dopytov
     * @param evt 
     */
    private void runScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runScriptButtonActionPerformed
        runScriptButton.setEnabled(false);
        runCursorButton.setEnabled(false);
        DatabaseConnection.init(null).runStatements(
                ((StatementField) statementTextArea).parseInputFromStart()
        );
    }//GEN-LAST:event_runScriptButtonActionPerformed

    /***
     * Spustenie dopytu na ktorom je kurzor
     * @param evt 
     */
    private void runCursorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCursorButtonActionPerformed
        runScriptButton.setEnabled(false);
        runCursorButton.setEnabled(false);
        DatabaseConnection.init(null).runStatements(
                ((StatementField) statementTextArea).parseInputFromCarret()
        );
    }//GEN-LAST:event_runCursorButtonActionPerformed

    /***
     * ulozenie do subora
     * @param evt 
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        int i = saveQueryFileChooser.showSaveDialog(rootPane);
        if (JFileChooser.APPROVE_OPTION == i) {
            String resultString = "Your file has been saved.";
            File f = saveQueryFileChooser.getSelectedFile();
            if (f.exists()) {
                if (JOptionPane.showConfirmDialog(rootPane, "Do you really want to overwrite this file?", "Overwrite file", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            if (!FileParser.init().saveFile(f)) {
                resultString = "Your file has not been saved.";
            }
            JOptionPane.showMessageDialog(rootPane, resultString);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    /***
     * nacitanie zo subora
     * @param evt 
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int i = saveQueryFileChooser.showOpenDialog(rootPane);
        if (JFileChooser.APPROVE_OPTION == i) {
            File f = saveQueryFileChooser.getSelectedFile();
            if (!f.exists()) {
                JOptionPane.showConfirmDialog(rootPane, "File is not exists.", "Not exists", JOptionPane.CANCEL_OPTION);
            }
            FileParser.init().openFile(f);
            JOptionPane.showMessageDialog(rootPane, "Your file has been read.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    /***
     * NAcitanie historie do aktualneho okna dopytov
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        statementTextArea.setText(historyStatementTextArea.getText());
        databaseSelector.setSelectedItem(historyDatabaseName.getText());
        resultsTabbedPanel.removeAll();
    }//GEN-LAST:event_jButton1ActionPerformed

    /***
     * zobrazenie dialogoveho okna pre vytvaranie tabulky
     * @param evt 
     */
    private void createTableMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTableMenuActionPerformed
        CreateTable panel = new CreateTable(generateType);
        if (generatePanel.getComponentCount() > 0) {
            generatePanel.remove(0);
        }
        panel.setVisible(true);
        panel.repaint();
        generatePanel.add(panel);
        generatePanel.repaint();
        statementDialog.setVisible(true);
    }//GEN-LAST:event_createTableMenuActionPerformed

    /***
     * spracuva udalost uzatvorenia okna
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int res = JOptionPane.showConfirmDialog(rootPane,
                "Do you really want to exit?",
                "Confirm",
                JOptionPane.YES_NO_OPTION);

        if (res == JOptionPane.YES_OPTION) {
            DatabaseConnection.init(null).close();
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /***
     * tlacitko pre generovanie dopytu
     * @param evt 
     */
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        statementTextArea.setText(statementTextArea.getText() + "\n" 
                + ((GeneratePanelEvent)generatePanel.getComponent(0)).actionEventGenerate());
    }//GEN-LAST:event_generateButtonActionPerformed

    /***
     * zobrazuje dialog pre vymazanie tabulky
     * @param evt 
     */
    private void dropTableMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropTableMenuActionPerformed
        DropTable panel = new DropTable(generateType);
        if (generatePanel.getComponentCount() > 0) {
            generatePanel.remove(0);
        }
        panel.setVisible(true);
        panel.repaint();
        generatePanel.add(panel);
        generatePanel.repaint();
        statementDialog.setVisible(true);
    }//GEN-LAST:event_dropTableMenuActionPerformed

    /***
     * zobrazuje dialog pre vkladanie zaznamu do tabulky
     * @param evt 
     */
    private void insertMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertMenuActionPerformed
        InsertToTable panel = new InsertToTable(generateType);
        if (generatePanel.getComponentCount() > 0) {
            generatePanel.remove(0);
        }
        panel.setVisible(true);
        panel.repaint();
        generatePanel.add(panel);
        generatePanel.repaint();
        statementDialog.setVisible(true);
    }//GEN-LAST:event_insertMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog applicationDialog;
    private javax.swing.JMenuItem applicationMenuItem;
    private javax.swing.JDialog connectionDialog;
    private javax.swing.JMenuItem connectionMenuItem;
    private javax.swing.JTextArea console;
    private javax.swing.JMenuItem createTableMenu;
    private javax.swing.JComboBox databaseSelector;
    private javax.swing.JTextField driver;
    private javax.swing.JMenuItem dropTableMenu;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel generatePanel;
    private javax.swing.JComboBox generateType;
    private javax.swing.JLabel historyDatabaseName;
    private javax.swing.JDialog historyDialog;
    private javax.swing.JList historyList;
    private javax.swing.JMenuItem historyMenuItem;
    private javax.swing.JPanel historySelectedPanel;
    private javax.swing.JSpinner historySizeSpinner;
    private javax.swing.JTextArea historyStatementTextArea;
    private javax.swing.JTabbedPane historyTabbedPane;
    private javax.swing.JMenuItem insertMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField path;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem reconnectMenuItem;
    private javax.swing.JTabbedPane resultsTabbedPanel;
    private javax.swing.JButton runCursorButton;
    private javax.swing.JButton runScriptButton;
    private javax.swing.JButton saveConnectionButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JFileChooser saveQueryFileChooser;
    private javax.swing.JDialog statementDialog;
    private javax.swing.JTextArea statementTextArea;
    private javax.swing.JTextField url;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    /***
     * listener pre pripojenie k DB
     * @param isConnected 
     */
    @Override
    public void connectionPerformed(boolean isConnected) {
        runCursorButton.setEnabled(isConnected);
        runScriptButton.setEnabled(isConnected);
    }

    /***
     * listener pre ziskanie vysledkov
     * @param results 
     */
    @Override
    public void runPerformed(Results results) {
        runScriptButton.setEnabled(true);
        runCursorButton.setEnabled(true);
        resultsTabbedPanel.removeAll();
        for (Result item : results.results) {
            resultsTabbedPanel.addTab(item.getTitle(), new JScrollPane(item));
        }
    }

    /***
     * listener pre zobrazenie priebehu vykonania dopytov
     * @param progress 
     */
    @Override
    public void runProgress(double progress) {
        progressBar.setValue((int) Math.round(progress));
    }

    /***
     * kliknutie na polozku z historie, ktora sa ma zobrazit
     * @param e 
     */
    private void historyListValueChanged(ListSelectionEvent e) {
        historySelectedPanel.setVisible(true);
        historyTabbedPane.removeAll();
        int index = historyList.getSelectedIndex();
        if (index < 0 || index > History.init().size()) {
            return;
        }
        HistoryItem historyItem = History.init().get(index);
        String stmt = "";
        for (String item : historyItem.getResultCaption()) {
            stmt = stmt + item + ";\n\n";
        }
        historyStatementTextArea.setText(stmt);
        int size = historyItem.getResultCaption().size();
        historyDatabaseName.setText(historyItem.getUsedDatabase());

        for (int i = 0; i < historyItem.getResultList().size(); i++) {
            historyTabbedPane.addTab(
                    historyItem.getResultCaption().get(i), new JScrollPane(
                            new JTable(historyItem.getResultList().get(i),
                                    historyItem.getResultHeader().get(i)
                            )
                    )
            );
        }
    }

    /***
     * zapis zo standardnych vystupov do konzoly
     * @param text 
     */
    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                console.append(text);
            }
        });
    }
}
