package cz.vutbr.fit.xfekia00;

import cz.vutbr.fit.jdbc.temp.ConnectionType;
import java.util.Properties;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import org.jdatepicker.impl.DateComponentFormatter;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 * panel pre grafick√© generovanie vysledneho dopytu vkladania dat do tabulky
 * @author Filip Fekiac
 */
public class InsertToTable extends javax.swing.JPanel implements GeneratePanelEvent {

    private JComboBox<String> _combo;

    /**
     * Creates new form InsertToTable
     *
     * @param combo
     */
    public InsertToTable(JComboBox<String> combo) {
        _combo = combo;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("Table name");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add value");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        jLabel2.setText("From");
        jPanel1.add(jLabel2);

        startModel = new UtilDateModel();
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        JDatePanelImpl datePanel = new JDatePanelImpl(startModel, p);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new DateComponentFormatter());
        jPanel1.add(datePicker);

        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));

        jLabel3.setText("To");
        jPanel2.add(jLabel3);

        endModel = new UtilDateModel();
        p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        datePanel = new JDatePanelImpl(endModel, p);
        datePicker = new JDatePickerImpl(datePanel, new DateComponentFormatter());
        jPanel2.add(datePicker);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /***
     * pridanie noveho riadku do tabulky
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ((DefaultTableModel) jTable1.getModel()).addRow(new String[2]);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private UtilDateModel startModel;
    private javax.swing.JPanel jPanel1;
    private UtilDateModel endModel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public String actionEventGenerate() {
        String sql = "";
        if (jTextField1.getText().isEmpty() || jTable1.getModel().getRowCount() <= 0) {
        
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.TSQL2LIB.toString())) {
            sql = "INSERT INTO " + jTextField1.getText() + "(\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            for (Object item : data) {
                if (((Vector)item).elementAt(0) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(0).toString();
                
                i++;
                if (i < data.size()) {
                    sql += ",\n";
                }
            }
            sql += "\n) VALUES (\n";
            i = 0;
            for (Object item : data) {
                if (((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(1);
                i++;
                if (i < data.size()) {
                    sql += ",\n";
                }
            }
            sql += ")";
            if (endModel.getValue() != null && startModel.getValue() != null) {
                sql += "\nVALID PERIOD [" + 
                        startModel.getYear() + "-" + 
                        (startModel.getMonth()+1) + "-" + 
                        startModel.getDay() + " - " + 
                        endModel.getYear() + "-" + 
                        (endModel.getMonth()+1) + "-" + 
                        endModel.getDay() + "]";
            }
            sql += ";";
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.TIMEDB.toString())) {
            if (endModel.getValue() != null && startModel.getValue() != null) {
                sql += "\nVALIDTIME PERIOD [" + 
                        startModel.getYear() + "/" + 
                        (startModel.getMonth()+1) + "/" + 
                        startModel.getDay() + "-" + 
                        endModel.getYear() + "/" + 
                        (endModel.getMonth()+1) + "/" + 
                        endModel.getDay() + ")\n";
            }
            sql += "INSERT INTO " + jTextField1.getText() + "\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            sql += "\n VALUES (\n";
            for (Object item : data) {
                if (((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(1);
                i++;
                if (i < data.size()) {
                    sql += ",\n";
                }
            }
            sql += ");";
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.ORACLEVALIDTIME.toString())) {
            sql = "INSERT INTO " + jTextField1.getText() + "(\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            for (Object item : data) {
                if (((Vector)item).elementAt(0) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(0).toString();
                
                i++;
                if (i < data.size() || startModel.getValue() != null || endModel.getValue() != null) {
                    sql += ",\n";
                }
            }
            if (startModel.getValue() != null) {
                sql += "MY_VALIDTIME_PERIOD_START";
                if (endModel.getValue() != null) {
                    sql += ",\nMY_VALIDTIME_PERIOD_END";
                }
            } else {
                if (endModel.getValue() != null) {
                    sql += "MY_VALIDTIME_PERIOD_END";
                }
            }
            
            sql += "\n) VALUES (\n";
            i = 0;
            for (Object item : data) {
                if (((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(1);
                i++;
                if (i < data.size() || startModel.getValue() != null || endModel.getValue() != null) {
                    sql += ",\n";
                }
            }
            if (startModel.getValue() != null) {
                sql += "TO_TIMESTAMP('" + startModel.getYear() + "-" + 
                        (startModel.getMonth()+1) + "-" + 
                        startModel.getDay() + " 00:00:00', 'YYYY-MM-DD HH24:MI:SS')";
                if (endModel.getValue() != null) {
                    sql += ",\nTO_TIMESTAMP('" + endModel.getYear() + "-" + 
                        (endModel.getMonth()+1) + "-" + 
                        endModel.getDay() + " 00:00:00', 'YYYY-MM-DD HH24:MI:SS')";
                }
            } else {
                if (endModel.getValue() != null) {
                    sql += "TO_TIMESTAMP('" + endModel.getYear() + "-" + 
                        (endModel.getMonth()+1) + "-" + 
                        endModel.getDay() + " 00:00:00', 'YYYY-MM-DD HH24:MI:SS')";
                }
            }
            sql += ");";
        }
        return sql;
    }
}
