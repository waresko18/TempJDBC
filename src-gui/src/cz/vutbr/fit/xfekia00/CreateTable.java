package cz.vutbr.fit.xfekia00;

import cz.vutbr.fit.jdbc.temp.ConnectionType;
import cz.vutbr.fit.jdbc.temp.difference.DateTimeScale;
import cz.vutbr.fit.jdbc.temp.difference.TimeType;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 * panel pre grafick√© generovanie vysledneho dopytu vytvorenia tabulky
 * @author Filip Fekiac
 */
public class CreateTable extends javax.swing.JPanel implements GeneratePanelEvent {
    private final JComboBox _combo;
    
    /**
     * Creates new form CreateTable
     * @param combo
     */
    public CreateTable(JComboBox combo) {
        _combo = combo;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tableName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        transactionTime = new javax.swing.JCheckBox();
        validTimeScale = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        validtimeType = new javax.swing.JComboBox();

        jLabel1.setText("Table name");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "type", "nullable", "primary key"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add column");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        transactionTime.setText("transactiontime");

        validTimeScale.setModel(new DefaultComboBoxModel(DateTimeScale.values()));

        jLabel2.setText("validtime");

        validtimeType.setModel(new javax.swing.DefaultComboBoxModel(TimeType.values()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validtimeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validTimeScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transactionTime)
                        .addGap(0, 80, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(transactionTime)
                    .addComponent(validTimeScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(validtimeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ((DefaultTableModel)jTable1.getModel()).addRow(new Object[4]);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tableName;
    private javax.swing.JCheckBox transactionTime;
    private javax.swing.JComboBox validTimeScale;
    private javax.swing.JComboBox validtimeType;
    // End of variables declaration//GEN-END:variables

    @Override
    public String actionEventGenerate() {
        String sql = "";
        if (tableName.getText().isEmpty() || jTable1.getModel().getRowCount() <= 0) {
          // prazdny nazov alebo zadny stlpec
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.TSQL2LIB.toString())) {
            // tsql2lib
            sql = "CREATE TABLE " + tableName.getText() + "(\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            // generovanie jednotlivych stlpcov
            for (Object item : data) {
                if (((Vector)item).elementAt(0) == null || 
                        ((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(0).toString();
                sql += " " +((Vector)item).elementAt(1).toString();
                if (((Vector)item).elementAt(2) == null || 
                        (Boolean)((Vector)item).elementAt(2) == false) {
                    sql += " NOT NULL";
                }
                
                if (((Vector)item).elementAt(3) != null && 
                        (Boolean)((Vector)item).elementAt(3) == true) {
                    sql += " PRIMARY KEY";
                }
                
                i++;
                if (i < data.size()) {
                    sql += ",\n";
                }
            }
                       
            sql += ")";
            // definovanie casov
            if (validtimeType.getSelectedItem().equals(TimeType.STATE)) {
                sql += " AS VALID STATE " + validTimeScale.getSelectedItem().toString();
                if (transactionTime.isSelected()) {
                    sql += " AND TRANSACTION";
                }
            } else if (validtimeType.getSelectedItem().equals(TimeType.EVENT)) {
                sql += " AS VALID EVENT " + validTimeScale.getSelectedItem().toString();
                if (transactionTime.isSelected()) {
                    sql += " AND TRANSACTION";
                }
            } else {
                if (transactionTime.isSelected()) {
                    sql += " AS TRANSACTION";
                }
            }
            sql += ";";
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.TIMEDB.toString())) {
            // timeDB
            sql = "CREATE TABLE " + tableName.getText() + "(\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            // genorovanie jednotlivych stlpcov
            for (Object item : data) {
                if (((Vector)item).elementAt(0) == null || 
                        ((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(0).toString();
                sql += " " +((Vector)item).elementAt(1).toString();
                if (((Vector)item).elementAt(2) == null || 
                        (Boolean)((Vector)item).elementAt(2) == false) {
                    //sql += " NOT NULL";
                }
                
                if (((Vector)item).elementAt(3) != null && 
                        (Boolean)((Vector)item).elementAt(3) == true) {
                    sql += " PRIMARY KEY";
                }
                
                i++;
                if (i < data.size()) {
                    sql += ",\n";
                }
            }
                       
            sql += ")";
            // definovanie casov
            if (validtimeType.getSelectedItem().equals(TimeType.STATE) || 
                    validtimeType.getSelectedItem().equals(TimeType.EVENT)) {
                sql += " AS VALIDTIME";
            }
            sql += ";";
        } else if (_combo.getSelectedItem().toString().equals(ConnectionType.ORACLEVALIDTIME.toString())) {
            // oracle validtime
            sql = "CREATE TABLE " + tableName.getText() + "(\n";
            Vector data = ((DefaultTableModel) jTable1.getModel()).getDataVector();
            int i = 0;
            // generovanie jednotlivych stlpcov
            for (Object item : data) {
                if (((Vector)item).elementAt(0) == null || 
                        ((Vector)item).elementAt(1) == null) {
                    continue;
                }
                sql += ((Vector)item).elementAt(0).toString();
                sql += " " +((Vector)item).elementAt(1).toString();
                if (((Vector)item).elementAt(2) == null || 
                        (Boolean)((Vector)item).elementAt(2) == false) {
                    sql += " NOT NULL";
                }
                
                if (((Vector)item).elementAt(3) != null && 
                        (Boolean)((Vector)item).elementAt(3) == true) {
                    sql += " PRIMARY KEY";
                }
                
                i++;
                if (i < data.size() || validtimeType.getSelectedItem().equals(TimeType.STATE) || validtimeType.getSelectedItem().equals(TimeType.EVENT)) {
                    sql += ",\n";
                }
            }
            
            // definovanie casov
            if (validtimeType.getSelectedItem().equals(TimeType.STATE) || validtimeType.getSelectedItem().equals(TimeType.EVENT)) {
                sql += " PERIOD FOR MY_VALIDTIME_PERIOD";
            }            
            sql += ");";
        }
        return sql;
    }
}
